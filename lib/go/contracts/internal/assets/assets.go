// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/FungibleToken.cdc (7.268kB)
// ../../../contracts/Lilium.cdc (7.656kB)
// ../../../contracts/WRLEvent.cdc (8.072kB)
// ../../../contracts/utilityContracts/PrivateReceiverForwarder.cdc (2.599kB)
// ../../../contracts/utilityContracts/TokenForwarding.cdc (2.351kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x59\x4d\x73\xdb\xba\xd5\xde\xf3\x57\x9c\x49\x16\xb1\xf3\x2a\xf2\x5d\xbc\xd3\x85\x67\x6e\xdb\xdc\xf6\x66\xc6\x9b\x4e\xa7\x75\x7b\xb7\x82\xc8\x43\x09\x63\x10\xe0\x05\x40\xc9\xcc\x9d\xfc\xf7\xce\x39\xf8\x22\x29\xc6\x56\x12\x6f\x2c\x91\xc0\x83\xf3\xf9\xe0\x01\x74\xf7\xfe\x7d\x55\xbd\x85\xc7\x23\xc2\x27\x65\xce\xf0\x69\xd0\x07\xb9\x57\x08\x8f\xe6\x09\x35\x38\x2f\x74\x23\x6c\x53\x55\x6f\xdf\xc2\x2e\xbd\xe4\x77\x3b\xa8\x8d\xf6\x56\xd4\x1e\xa4\xf6\x68\x5b\x51\x63\x55\x11\x50\xfe\x0a\xfe\x28\x3c\x08\xa5\xa0\x4d\xb0\x9e\x61\xd3\x4c\x07\x67\x33\xa8\x06\x8e\xe2\x44\xaf\xe8\x79\x6b\x6c\x07\xde\x6c\xab\x87\x16\x04\x0c\x0e\xad\x83\xb3\xd0\xde\xd1\xfb\x06\x7b\x65\x46\x10\xa0\xf1\xbc\x80\xda\x80\x3f\xa2\xb4\xf9\x7b\x15\x90\x35\x62\x43\x33\x65\xd7\x2b\xec\x50\x7b\x1a\x06\x33\x47\x8a\xbd\x5b\xb6\x7f\x02\xb2\x30\xaf\x35\x8a\x62\x44\x0e\x11\x8a\x1d\x14\x3a\x10\xba\x01\x2d\x3a\xa9\x0f\x15\xbb\xeb\x67\x11\x70\x3d\xd6\xb2\x95\xe8\xb6\x21\x84\xff\x15\x83\xf2\x3b\xb0\xe8\xcc\x60\x29\x60\xbf\x8a\xfa\x08\xa2\xae\xcd\xc0\xb6\x09\x0f\xe6\xac\x5d\x70\x2e\x85\x27\x39\xc1\x76\x08\x32\x98\xf2\x52\x63\x65\x5a\x5e\x8e\x41\x33\x26\x38\x6f\x2c\x36\x20\x75\x0c\x49\x42\xa7\xe7\xe2\x10\xbd\x5c\x4e\x3a\x0a\x07\x1d\xfa\xa3\x69\x1c\x64\x3f\xcc\x59\xa3\x65\x0f\x8d\x3f\xa2\x8d\xe9\xa8\x85\x86\x5a\x28\x15\x5d\xfa\xa7\x35\x27\xd9\xa0\xdd\x6d\x60\xf7\x2f\xac\x51\x9e\xf8\x33\xcd\xda\xfd\x22\x14\x19\x5a\x1c\x2e\xa1\x71\x6c\x86\x9b\x3e\x81\x06\x6b\x25\x2c\x42\x6f\xf1\x43\x6d\x74\x23\xbd\x34\x3a\x84\xb8\x37\xce\x4f\x9f\xb1\x8d\x16\x9d\xb7\xb2\xf6\x15\x19\x8b\xcf\x58\x0f\xf4\x12\x62\x58\xda\x41\xd7\x61\x70\x08\x45\x70\x39\xb8\x3f\x02\xad\xe3\xb0\x17\x56\x78\x84\x3d\xd6\x62\x20\x5b\x3c\x1c\xe4\x09\x1d\x0f\x27\x6f\xf9\x83\xd8\x4b\x25\xfd\x48\x29\x70\x47\x61\xb1\x12\x60\xb1\x45\x8b\xba\xe6\xba\x08\x61\x0e\x01\x0d\x29\xd4\x6a\x04\x7c\xee\x8d\x8b\x50\xad\x44\xd5\xb8\x62\x51\x25\x35\x18\x8d\x60\x2c\x74\xc6\x62\xb2\xb8\x84\x62\x5b\x55\x0f\xd4\x3a\xce\x44\x83\x42\xe8\x17\xd6\x74\xe2\x09\xa1\x1e\x9c\x37\x5d\x8e\x70\x0c\x4d\x2e\x78\x8a\xcd\x3c\xca\xd4\x48\x06\x4e\xc2\x4a\x33\xd0\x68\xa9\x0f\x0e\xce\xd2\x1f\x19\x3e\x54\xde\xb6\xfa\x64\x2c\xe0\xb3\x20\x98\x0d\x08\x68\xc5\x50\xa3\xe7\xdc\xef\xb1\xa0\x63\x03\xfb\x31\xf5\x2d\xf7\x00\x87\x03\x52\x51\xcc\x9a\xeb\x97\x11\x06\x27\xf5\x61\x62\x2b\xa5\xb6\x98\xb6\x89\x6e\x9a\x76\xd1\xa2\x99\x30\x2a\x32\xc0\xa1\x6e\x78\xa6\x0d\xe5\x96\xba\xa5\x47\xb4\x1f\xbc\xf9\x40\xff\x37\xec\x91\x19\x3c\x75\x0d\xad\x49\x24\x40\x0b\x31\x37\x90\xb3\x02\x6a\x24\x54\x05\x0a\x9b\x03\x5a\x70\x9d\xb0\x3e\x2f\xb5\x85\x47\x13\x56\x8a\xe8\xde\x80\xd0\xa5\x0f\x36\x55\xa0\xa7\xd8\xa3\x8e\x42\x32\xf2\xa2\x8d\x15\xe7\x49\x28\xa1\xb5\xa6\x9b\xd6\x08\x53\x55\x68\x21\x2e\xdc\x06\x7b\xe3\xa4\xcf\xd5\x01\x46\xcf\x56\x7a\xe7\x52\x6d\x11\x43\x52\xe4\x3d\x06\x7c\x2b\xb4\x6b\xd1\x6e\xab\xea\xfd\x5d\x55\xdd\xdd\xdd\xcd\xc3\x46\x4f\xf8\xe9\x0a\x2b\x7f\x95\x91\x73\x6a\xb7\x3c\xbd\x1f\xf6\x2b\x44\xbf\x48\xcf\x1f\x55\x05\x00\x90\x96\xf2\xc6\x0b\x05\x7a\xe8\xf6\x68\xb9\xb4\x43\x1c\xa4\x06\x7c\x96\xce\x53\xdb\x6c\xf3\x84\x07\x0f\xd2\xc1\xd0\xc7\x46\x9a\x94\x96\xa5\x47\xa8\xdd\x60\xb1\x50\x52\xc0\x76\x43\xdf\xab\x31\x63\x38\x2f\x46\x47\x3c\x37\x70\x37\x53\x69\x04\xc0\x46\x78\x4c\xa3\xf8\x3f\xb9\x73\x12\x36\xc0\xfc\x9b\x51\xee\xe1\x3f\x9f\xe4\xf3\x9f\xfe\x7f\xe2\x03\xdb\xfb\xa0\xa5\x97\x42\xc9\xcf\xd8\xcc\x20\x92\x97\x78\xc2\x44\xd9\xd2\x01\x76\xd2\x53\x37\x9c\x29\xb5\x64\x68\x09\x9a\x83\xda\xa2\xf0\x0b\x18\xb2\x24\x40\x5c\x2c\x77\x23\xc3\xe7\xb9\x7d\xb7\x4b\x03\x7f\x8b\xb5\xa6\xbf\xd9\xbc\x90\x0f\x62\xc0\x54\xaf\x3a\x54\xa9\x08\x95\xf6\xa2\xa1\x79\xd9\x1b\xd1\xd1\xbe\x92\xec\xdb\x30\xc4\x3d\x7c\x6c\x1a\x8b\xce\xfd\xe5\xc2\xde\xbf\x87\x3a\xff\x8e\x70\x16\x7b\x9b\x84\x41\xb5\x68\xae\xb2\x37\x2f\x7b\x61\xaf\x37\xab\xd6\x26\xee\x5a\x35\x73\xd1\x46\x48\xc4\x57\x47\x96\xb7\xf8\xfb\x20\x2d\x17\xaf\x83\xd6\xd8\x1c\x5d\x22\xc6\x04\xb2\x20\x85\x52\xef\x4c\x52\x63\x5f\x5a\x63\xda\x22\x8d\x41\x07\xda\xe4\x05\xe7\x6b\x19\x0d\xbb\x7d\xda\x6a\x8f\x68\x71\x93\xe7\x4e\x76\x36\x85\x82\x76\x12\xd3\xc7\x0a\xed\x8d\x73\x32\x6e\x26\xa6\x0d\x45\x4a\x46\xc4\x0d\xa5\x8f\x61\x70\xc5\x74\xf2\xb8\x31\x6c\x87\xc6\x1a\x9d\x13\x56\xaa\x31\xea\x13\x26\x38\x73\xd6\x10\x2d\xd9\x5e\x64\xe5\x52\x04\x94\x7d\x22\x52\x48\x5a\x2a\xf3\xa8\x1b\xf6\x91\x98\x96\x81\x63\x71\x92\xb8\x71\x36\x39\x6c\x0d\x7e\xb0\x54\x34\x91\x3b\xf3\xfe\x66\xb1\x33\x27\x6c\xf2\x3e\x37\x99\x38\x03\x79\x9c\x28\x88\x77\x4c\x2e\xe8\x1c\x28\x3c\xa1\xa2\x02\xed\x87\xbd\x92\xf5\x06\xf6\x03\x15\xad\x74\xf4\x8c\xe2\x22\x28\x6e\x7b\x85\xdd\x0c\x2c\x65\x81\x85\x41\x51\x56\xa4\xc8\x38\xed\x6c\x57\x0e\xce\x5c\xb7\xcd\x80\x6a\x96\x7f\xcc\x0e\x6a\xe4\x2d\x24\xac\x9e\x2c\x7d\xd9\x9f\xb0\x6a\x27\x46\x38\x58\xa1\x7d\x54\x75\x71\x9d\xec\x23\x6d\xe8\xa9\x16\xc8\x1d\x79\x4a\x2c\x5a\xac\xe8\xb3\x0a\x89\x12\xdf\x9c\x5d\x12\xbb\xf5\x4c\x2d\x52\x97\x32\xee\x0c\x81\xeb\x2f\xe5\x3e\xbb\xee\x8f\xd6\x0c\x07\xda\x9a\xb3\xbe\xba\xd6\xa1\x20\x95\xd8\x2b\x0a\xca\x2b\x3e\x71\xf2\xae\x71\x89\xb0\x16\x7e\xcc\x6c\x9f\x61\x7c\xbb\x1f\xd4\x15\xed\xa0\x73\xb9\x2f\x28\xea\xf6\x1e\xfe\x1a\xca\xf7\x8f\x3c\x85\xa7\x19\xb7\x7c\x14\x90\x61\x67\xd1\xc5\x13\x46\x1b\xad\x0e\xc5\x45\xdd\x00\x27\xa1\x06\xbc\x98\x16\xa6\x6c\x63\xdb\xc2\xcf\x3f\x43\xb4\xe2\x62\x24\xfd\xbd\x49\xfc\x2f\x54\x1c\x07\xdd\xe0\x3c\xa9\x42\x5a\xc9\x89\x0e\x41\x84\x20\x25\xc4\xa8\x6e\xcb\x5e\xc3\x3e\xbd\x99\xc1\x7f\xa9\xe6\x9f\xbe\x14\x3e\x4e\x87\x8a\x1f\xe7\xe3\xb8\x7b\xac\xd0\x31\xef\x26\x57\xd2\xf1\x6f\x98\x48\x50\xea\x5a\x0d\x0d\x92\x94\x4c\x27\x93\x60\x46\x7d\xc4\xfa\x69\x1e\x84\x48\x01\x19\xe5\x8c\x7c\xae\xa5\x0c\x91\xc2\xbf\x46\xe0\x87\x30\x04\x81\x5f\x4d\x19\xa1\x31\x69\xd0\xba\x9a\xdf\x80\x92\x4f\x74\x18\x55\x92\x55\x54\x47\xf2\x48\xe8\xa6\x08\x28\xd6\xb9\xf4\x82\x44\x93\x6c\xb9\x68\x3d\xf4\x2a\x9c\x45\xe0\x75\x22\x4f\x49\x5a\x12\x79\x12\xb7\x5e\x3c\x61\x61\x63\x62\xe8\xf8\xc6\xd1\xd6\xb4\x1e\xfe\xd2\x4f\x63\x8f\x2f\xf6\x4f\xc4\xba\x09\x0a\x24\xf4\xcc\xed\xb2\x8e\xe2\x61\xf4\x9a\x32\x22\xf1\x26\xa4\x0e\xf9\x28\x5b\x2b\x1f\xe3\x60\x7a\xea\xce\x20\xe4\xd1\xa4\xf8\x84\x0f\xd2\x45\xe3\x39\x0c\x0c\xf2\x25\x0a\xc1\xcd\xb4\x32\x32\x04\x6d\x22\x45\x04\x42\x6d\xac\xc5\xda\xab\xf1\xaa\xf8\x47\xe7\x96\xe1\x2f\x72\x7c\xd2\x8c\x02\x4e\xcb\x3d\x73\x16\x51\x12\xc8\x71\xf8\x5c\x1c\xd3\x1f\x99\x78\xb3\x78\x7b\x7b\x1d\x3f\x39\x54\xed\x94\x66\x12\xca\x3a\xcf\x24\x8f\x12\xbb\x4c\x63\x93\xaa\x25\x3c\x4a\x40\x57\x33\xca\xa5\x68\x4c\xb1\x9a\x50\xf8\xb2\x0c\xca\x75\x82\x37\x5f\x3b\x82\xbe\x90\x2a\x5e\xf3\x3e\x0b\x9e\x4d\xee\x98\xcd\x7a\xee\xd8\x9c\x70\x21\x22\xd2\xad\x06\xf3\x4c\x6d\xf9\xfc\x37\xf6\x2c\x15\xc4\xda\xe9\xac\x43\xa1\x27\x34\x11\x01\xf1\x84\x76\x5c\xde\xf0\xe5\xd9\xf3\x5b\x03\xf7\xd2\x3d\xd9\x14\x94\xb3\xd3\x60\x2b\x35\x4e\xcd\x5b\x5e\x74\xe5\x78\xb6\xc6\x76\x79\x5b\xfa\xca\xdd\xd1\x14\x7f\x7e\x8d\x34\xbd\x2a\x08\x1c\xc2\x17\x46\x2e\x2a\xa6\x48\xf8\x4d\xba\x6f\xa1\x21\xe5\xce\xe5\xf5\xc6\x20\x9b\x7e\xa0\x35\x22\x6c\xb9\x0d\x09\x59\x8a\x21\x0a\x57\x5b\x45\xbf\xc9\xcf\x33\xf9\x30\x93\x1d\xbd\x95\x14\x98\xa4\x0d\x17\x75\x7e\xc9\x40\x01\xe2\xe5\x1e\x7d\x55\x60\xef\xc2\x76\xbe\x2b\x12\x9b\x17\x78\xe7\x66\x4c\x05\xab\x22\x3b\xf3\x5c\xd9\x7a\x12\x30\x36\x6b\xf3\x7f\x58\x02\x59\x7c\x8d\x61\xfe\xfc\x8a\x90\xf9\x18\xd4\x4b\x91\x25\x89\x69\x54\x50\x79\x42\x83\xb1\x80\xbf\x0f\x42\x85\x6f\x2b\x9a\xe6\x45\x25\x03\x2f\x4a\x35\x3a\x0f\x70\x9c\x48\x35\x0b\x55\xae\x7f\x76\x7b\x6c\x8d\xc5\x1d\x4b\x03\xf4\xb1\x2a\xd5\x90\x17\x5d\x6c\x48\x6b\xe0\xf1\xb6\x64\x8f\x07\xa9\x35\x95\xd1\xe2\x4e\xb4\xdc\x96\xae\xcc\x7e\x9d\xb8\xd9\xc0\x9b\xe9\xe3\x5b\xf8\xf0\x72\xb4\xff\x91\x2b\x64\xbf\x20\x76\xbe\x03\x8b\x9a\xa3\x44\xb6\xb7\x78\xe2\x0b\xca\x34\x5c\x04\x89\x72\xbd\x8c\xbc\x52\x87\x88\xa6\x21\x0d\x52\x16\x8a\xe4\x34\xcb\xb4\x5c\x39\x67\x5e\xa7\x42\x16\xc9\xbf\xbb\x83\x8f\xce\xa1\xf5\xe5\x4a\x6b\xce\xe9\xd1\xfd\x72\xd1\xc1\x84\x44\xe2\x20\xc9\xeb\x25\x5e\x54\xdb\xa7\x72\xff\x2c\xc3\xb9\xa7\xf7\x89\x40\x22\xda\x15\x1d\x44\xb6\x6f\xa5\x7b\x88\x3f\x31\x84\x1c\x1f\xd0\x3f\x8e\x3d\xde\xdc\xde\xde\xc3\x7a\x76\xff\x26\x34\x09\xe2\x14\x65\x66\xb9\xda\x74\xbd\xf0\x93\x4b\x46\xf2\xef\x3b\x7a\xe5\xaa\xea\xfb\xbf\xf4\x98\x1d\x48\x8f\xbf\xab\x16\xdd\xd0\xbd\x5a\x84\x25\x3d\xdf\x76\x96\x09\x02\xf0\xd7\xae\xf7\x63\xac\xc0\x78\xce\xd4\x63\xfc\xbd\xc1\xc4\x31\x33\x52\xe5\xac\x1e\x05\x15\xee\x67\xb4\x66\x29\x1d\xab\x69\x15\x2e\x97\xb8\x59\xa3\xd0\x95\x50\x5f\x1e\x03\x7f\xda\xfe\x74\x0f\x6f\x68\x4b\xd3\x78\x56\x63\x52\xaf\xd1\x26\x0e\x19\xff\x24\x35\x35\xe9\xcd\x85\xef\x5f\xfe\x17\x00\x00\xff\xff\x1a\xfd\xf3\x08\x64\x1c\x00\x00"

func fungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_fungibletokenCdc,
		"FungibleToken.cdc",
	)
}

func fungibletokenCdc() (*asset, error) {
	bytes, err := fungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xac, 0x1c, 0xf4, 0x50, 0x78, 0x2d, 0xa7, 0xca, 0x50, 0x3f, 0xc0, 0x48, 0x50, 0x81, 0x99, 0x2d, 0xd4, 0x28, 0x3c, 0x7, 0xd0, 0xe1, 0x9f, 0x3e, 0xc8, 0x5c, 0x12, 0x3b, 0x91, 0x5e, 0xf8, 0x6}}
	return a, nil
}

var _liliumCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\xdf\x6f\x1b\xb9\x11\x7e\xf7\x5f\x31\xcd\x43\x2b\x23\xb6\xec\x02\x45\x1f\x0c\xe7\x2e\x4e\xe3\x14\x41\x2f\x69\x91\xe4\xda\xc7\x9a\xbb\x3b\xb2\x58\xef\x92\x02\xc9\xd5\x8f\x0b\xfc\xbf\x17\x1c\xfe\x58\x92\xda\x95\xe5\x33\x72\xc0\x21\x91\x44\x7e\x1c\xce\x7c\xf3\xcd\x0c\xc3\xbb\x95\x54\x06\x3e\xf4\xe2\x9e\x57\x2d\x7e\x93\x0f\x28\x60\xa1\x64\x07\x97\xdb\x0f\xbf\x7e\xfe\xfb\xc7\x77\xbf\xdc\x7e\xfb\xe7\x3f\x6e\x3f\xdf\xbc\x7f\xff\xe5\xf6\xeb\xd7\x93\x93\x55\x5f\x41\x2d\x85\x51\xac\x36\xf0\x0b\x6f\x79\xdf\x5d\x15\xfb\xbf\x9f\x9c\x00\x00\x5c\x5c\x5c\xc0\x37\x69\x58\x0b\xba\x5f\xad\xda\x1d\xc8\x85\xdf\xa0\x81\x0b\xc0\x2d\xd7\x06\x45\x8d\xb4\xd8\xc2\xae\x99\x02\x63\x37\x7c\xa5\xf5\x57\xf0\xeb\x07\xbe\xfd\xeb\x5f\x02\x1a\x7c\x62\x5b\xde\xf5\xc2\x83\x78\xd4\xb8\xbb\x45\x03\x1d\xdb\x8e\xef\xb5\x96\x3c\xa0\xd0\x1f\x05\x37\x9c\xb5\xfc\x37\x6c\xc2\x2f\xc3\x8a\x25\x02\xae\x51\x18\x30\x4b\x66\x80\x6b\xc0\x8e\x1b\x83\x0d\x6c\x96\x28\xc0\x2c\x71\xb8\x38\xd7\x50\x2b\x64\xc6\xc3\xd8\xf3\xdd\xd6\xbd\x63\x66\xdc\xfd\x3d\xb7\xeb\xb4\x34\xec\x3f\xdc\x2c\x1b\xc5\x36\xe2\xd9\x66\xd1\x76\x60\x0a\x61\x13\x30\x5c\x04\x19\xfc\x9b\xf5\xad\x19\x35\x30\x1e\x37\x63\x9d\xec\x85\x09\x76\x9d\xd1\xd6\x2b\xb8\x69\x1a\x85\x5a\xff\xbc\x67\xe7\x7b\x5c\x49\xcd\xcd\xef\x70\xdf\x60\x67\x13\x30\xc0\xc8\x83\x56\xc6\xc3\xf6\xac\x34\xf2\x80\x8d\x9f\xb8\xf8\x1d\x06\x0a\xdc\xa4\x46\x76\x03\x48\x69\x96\xc3\x2f\x6c\xda\xb3\xe2\x5d\xaf\xc4\x0b\xdd\xa4\x8d\x92\xbb\x09\x23\x1c\xfc\xb4\x11\x64\xa4\xfa\x5b\x42\xd2\x67\x58\xc1\xc8\x1b\xe4\x02\x05\x0a\xb5\xec\x55\x8d\xd3\xa4\xcf\xce\x9a\xb1\xb6\x95\x1b\x6c\x6e\xa6\x2c\x23\xcb\x5f\x66\x59\x45\x10\x47\x58\x96\x9d\x35\x4b\x8c\x18\x48\x97\x1e\x7e\xcb\xea\x25\xf4\x1a\x15\x68\x23\x15\x6a\x60\x02\xb8\xd0\x86\x89\x1a\xad\x7c\x49\xd1\xee\x48\x08\x68\xbb\x55\x31\xb3\x44\xee\x56\xb3\x7b\xcc\x2e\xb1\xe8\x45\x6d\xb8\x14\xda\x2f\xf3\x7b\x98\x68\xe0\x5e\xae\xd1\x46\x0f\x2a\x87\xb6\x52\x48\xdf\xaf\xa4\x36\x56\x63\x1a\x4e\x1b\x23\x1c\x17\x85\xc2\x06\x41\xda\x11\x51\x6a\xd6\xb6\xd8\xcc\xb3\xd3\xeb\x25\xd6\x0f\x1a\x96\x6c\xb5\xb2\x5e\x33\xa0\x7a\x61\x78\x87\xb4\x15\xd7\xa8\x80\x45\x0b\xc9\x7d\x39\x46\xc4\xfa\xe2\x5d\x6c\x57\x08\x77\xff\x0a\x83\xb3\xc3\xcd\xac\x2c\xe2\xd6\x58\x0f\x65\x2a\x49\x11\xb4\x66\x46\x38\xc7\xeb\x05\x17\xb4\xf9\x0c\xb4\xb4\xbf\x2b\x8a\xa0\x90\xb0\x61\x3b\x58\x48\x6b\x5b\xc7\x5a\x5e\x73\xd9\x6b\x17\x0e\x23\xfd\x99\xce\x8b\x83\x6b\x64\xef\x8f\xe5\x02\x18\x57\x73\xb8\x01\xbd\xc2\x9a\xb3\xd6\xb3\x72\x20\x89\x40\x6c\xb4\x45\xaa\x06\x1b\x8c\x24\x96\x47\xb8\x41\x04\x72\x57\x58\x46\x45\x20\x32\xa1\x28\x7a\xf3\x7f\x29\xb9\xe6\x0d\xaa\xb3\xe2\xfb\x2f\x58\x23\x5f\xef\x7f\xff\x8e\xb5\xc4\x2a\x5f\x2c\xd3\xd8\x51\x0d\x84\xca\x2f\x70\xb7\xd3\xb0\x8e\x8c\x4d\xeb\xa5\x5f\x95\xd7\x3b\x5f\x2f\x79\xac\x42\x14\x96\x00\x68\xc9\x10\xae\x42\x4e\xb5\x14\xb0\xdc\x88\x7b\xed\xc6\x59\x81\x7c\x0a\xdf\xe3\xef\xf6\x3f\x8d\xed\x62\x1e\x20\xdf\x04\xf0\xb8\xe4\x31\xbf\x56\x28\x4d\xe9\x97\xd9\x82\x0f\x81\x8b\x8e\x33\xec\xc1\x25\x9f\x93\x37\x60\xee\x83\xba\xef\x3b\x14\x26\xdb\x68\xf3\x26\xa0\x6b\xb7\xdb\x6f\xa2\x22\x18\x13\x6f\x3e\x79\xf4\x47\xe3\xb9\xa5\xbd\xba\x18\xb4\x5d\x11\x53\x3b\x9f\xb2\x41\x88\x7a\xed\x18\xb3\x94\x6d\x93\x21\xd8\x43\x3a\x29\x70\x17\x97\x56\xc8\xc5\x3d\x18\xc5\x84\x5e\xa0\x52\xd8\xcc\xed\x31\x0a\x4d\xaf\x84\xa6\xf5\x02\x37\xbe\x79\x09\x28\x21\xa9\xfc\xa1\x32\x4b\x2d\x02\x76\x49\x6a\x93\x86\x1b\xca\xc7\x2a\x29\xa6\x19\x16\xb6\x1a\x37\x36\xb1\xc6\xaf\x6d\xd9\xb3\xe8\x45\x74\x5c\x59\x46\xae\xe0\x6d\xce\x56\x67\xd3\x41\x06\x64\x1f\xcf\x7d\x10\xb2\x0d\x56\xc8\x27\xfb\x0f\xf7\x67\xe8\x3f\x08\x4c\x6e\x04\xaa\x9f\xe7\xcc\xd5\xf9\xd3\x0c\xcb\xb9\x12\xae\xcf\x53\x59\x18\x38\xeb\xd0\x4e\xa7\xe8\xe8\x9d\xf6\x3c\x36\xfa\xc0\xc8\xea\x7f\x58\x97\x94\x24\x1a\xb2\xa6\xd1\x19\x0c\x37\x3a\x66\x9d\x8f\x67\x96\xd5\x08\x74\x45\x7d\x04\x43\xb9\x06\x5f\x57\x2d\x92\x6f\x0d\x08\x42\xdb\xe3\x9d\x69\x15\xd6\xac\xd7\x38\x90\x3e\xcf\x41\x6b\x72\x42\x6e\x4b\x63\x54\xc1\x12\xaf\x7a\x24\x40\xb4\xf7\x4f\x83\xed\x4b\x96\xdf\xab\x42\x14\x96\x99\xba\xef\xb0\xa1\xab\x93\x88\x2f\x24\x15\x23\x4f\x4b\xdf\xbc\x1c\x26\xa0\x0f\xc4\xcc\x45\x7d\x8c\x74\xa5\xee\xd8\x36\x9f\xa4\x10\xae\xcf\x7d\x9f\xab\xff\x00\x6f\xdd\x4c\x30\xcf\x6f\xfd\x14\x4b\x5f\x3b\xa4\x79\x29\x5e\x05\x59\xf7\xdb\xd0\x6c\x9b\xeb\x46\x9f\x64\x6c\xb6\x07\xde\xc0\xe5\xfc\x32\xfb\x3d\xc4\x34\xd7\xf9\x84\xb8\x7e\xc1\xac\xf4\x88\xbf\x7a\x32\x39\xc1\x9b\xb1\x2f\xcf\xb3\xcb\x27\x27\x24\xe7\x0c\x3a\x74\xdb\xad\xcc\x6e\xbc\x4b\xca\xb3\x23\xd7\x4e\x47\x44\xab\x2b\xc0\x52\xb2\xff\x86\x4a\x0e\x5d\x80\x68\xa2\x16\xf2\x41\xea\x58\xdb\x5a\xd5\xf4\x92\x67\x4b\x39\xd5\xfe\xae\xd7\x4e\xfa\x5c\x1d\x0c\x5d\x4b\x86\x46\xed\x1a\xa1\x38\xdc\x28\xa3\x65\x8b\x66\xbf\x90\xaa\x71\x2d\x05\x65\x94\xfb\x7d\x40\xab\x6b\xaa\x1e\xae\x4f\x60\x55\x4b\xa9\xab\x5c\x15\x0f\x7c\xd5\xb1\x2a\x53\xda\x80\xd9\xad\x70\xbf\x61\xb0\x04\x2f\x9d\x39\xb3\xda\x5a\xaa\xe9\x13\x62\x76\x39\xbf\x3c\x4d\x83\x94\x35\x23\x37\x4d\xc7\x05\xd7\x46\x31\x23\x55\xd9\x4d\x38\xbc\xcf\xb8\x71\xbd\xd0\x91\x7a\x17\x23\x9a\x84\x69\x74\x22\x38\x98\xda\xc5\xd9\x13\x63\xc1\x15\xbc\xf5\x7d\x5a\x4e\x6a\xdb\x12\xe7\xdf\x4c\x50\xfd\x3a\x7c\x99\xcc\xfe\xaf\x3e\xb1\x6d\x78\x74\x50\xc8\xea\x25\x36\xaf\x32\xac\x24\xab\x62\xae\x1f\x1c\x62\xb2\x8f\x87\x2b\xd1\xf8\x75\x27\x00\x1e\x27\xe2\xe5\xe6\x96\x17\xc7\xab\x98\x93\x8e\x8b\x97\x3b\x9b\x88\xea\xfe\x5a\x04\x82\xbc\x55\x0e\x56\x87\x3c\x12\x00\xa7\x25\x27\xa1\xe7\xd8\xf0\x11\x6a\xae\xab\xc6\x94\x71\xcc\xd2\x3e\x24\xab\x1b\x4e\x6c\x3d\x0b\x0d\xfd\x71\x8d\x7c\x64\xde\x5e\x0b\xee\x5b\x48\x9b\xe5\x6e\x20\x0f\xa3\x4c\x48\x81\xbc\x1e\xc7\x19\x02\x92\xd6\x7c\x94\xf0\xf9\x51\x76\x9f\xab\x31\x47\x86\xda\x6e\xd0\xc9\xe5\xce\xa8\xe9\xb0\x86\x75\x41\x46\x4d\xf2\xe4\x76\xb6\xd7\x2a\x27\x2d\x68\x37\x25\xbc\x07\x69\x32\x98\x3c\xd2\x34\xa6\x55\xf8\xa8\x84\xf6\x7e\xfe\xc9\x6a\xdc\x15\xbc\x72\xbe\xf2\x6f\x2f\x4e\xf8\x2b\x84\x7b\xa2\x91\xb2\x1e\x10\x54\x48\x5e\x4d\xe1\x5c\xfb\x02\x5f\xb8\x7e\x02\xb7\x45\xad\x1d\xa8\xf5\x42\x08\xa7\x83\x9a\x3c\xe2\xf5\xa8\x08\xbd\x19\x53\xa1\x91\x53\x85\x34\xa0\x7b\xb5\x62\xda\x4d\x01\x5d\x14\xaa\x52\xa0\xd2\x4f\xc7\x56\xf8\xd7\x63\x5d\xf7\xbe\x43\x60\xcc\x4b\x4f\xb6\xec\xc5\xab\x57\xd9\x61\xc3\x8b\x9a\x72\x9a\x38\xc7\x2b\xc4\xd8\xd4\x51\x5e\x27\xfb\x3c\x2d\x33\x89\xaa\xbe\x5c\x66\xac\xb6\x3e\x2d\x31\x51\x41\xf3\x06\xba\x57\xe2\x59\x79\xef\x7b\xbf\x61\x0a\x09\xaf\x52\x67\x80\x8b\x05\xd6\x86\xaf\xb1\xdd\x11\x2e\x0d\x9e\x43\x43\x3f\x79\xc0\x67\x69\xf0\xca\xcd\x24\xae\x61\x4a\x9e\x1e\x59\x6f\x64\xc7\x0c\xb7\xca\xb0\x03\xdd\x57\xf4\x9e\x83\x4d\x9c\xa9\xf3\xf1\x37\x7d\xe4\xcf\x1e\xbb\xc8\xec\xbe\x36\x52\x1d\x16\x95\xc1\x1f\x3f\x70\x12\xb0\xeb\x59\x60\xcc\x74\xe3\x3f\xde\x87\x17\xc9\x50\xbc\xbe\xee\x33\x3b\x61\x1e\x71\x3b\x35\x9e\x28\x9c\x27\xf3\x9f\x2f\x2f\xed\x3c\x90\x2f\x89\x5a\xe2\x16\xfc\xf7\xd2\xfd\x9f\xae\xbb\xb8\x00\x57\x83\x13\xa7\x53\xf3\x5d\x56\x82\xa4\x94\x51\xbf\xcc\xd6\x68\x5b\x6f\x2e\xb2\xb7\x4b\x07\x79\x32\xea\xe1\xf1\x9c\x2e\xef\x72\x9a\x5f\xc1\x67\xce\xdc\x9e\x37\xbb\x3e\x27\x30\x37\x2f\x5d\xf8\x73\x2f\x5a\x8a\x97\x8b\xf0\xd8\xc5\x98\x65\x49\xcb\x6b\xa8\xd9\x8a\x55\xbc\xe5\x66\x17\x0a\x17\x75\xfd\x4d\xfa\x4a\x43\x0f\x94\xb8\x5d\x49\x8d\x69\x6a\xd1\xea\x3b\xdf\xbc\xdf\x41\x87\x66\x29\xed\xd0\xaa\x64\x7f\xef\x7c\x75\x17\xde\xe9\xee\x80\x0a\xfc\x82\xd5\xa3\x2e\xc9\x6e\xd5\x72\xf1\x70\xfd\xc7\xef\xe3\x0f\x7e\x8f\x3f\xcd\x32\xf6\x5c\xb8\x6b\xf8\xfb\xc6\x67\xc1\x6c\x8d\x61\xea\x1e\xcd\xb8\x73\xe2\xc2\x1f\xec\x25\x1f\xda\x3b\x58\x70\x6c\x0b\x27\xbd\x0b\xbf\x3d\xd7\x47\x69\x52\x7e\x1f\x7d\x08\x3d\xec\x2e\xbf\xe8\x65\xde\x22\x01\x20\x41\x1f\xe8\x9c\x8d\x4f\xb3\xc3\xec\xa5\xbd\xa3\xec\x25\x94\x3c\x2e\xb7\x56\x2c\x98\x48\xff\x2d\x43\x2f\xe5\x26\xe9\x24\xe3\x33\xf9\x86\xe9\xe4\xad\xb6\x19\x73\x69\x22\x3d\x07\xfe\x6d\x71\x3c\x19\x1f\x4f\x1e\x4f\xfe\x1f\x00\x00\xff\xff\xb8\xf5\x94\xf0\xe8\x1d\x00\x00"

func liliumCdcBytes() ([]byte, error) {
	return bindataRead(
		_liliumCdc,
		"Lilium.cdc",
	)
}

func liliumCdc() (*asset, error) {
	bytes, err := liliumCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Lilium.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa, 0xb2, 0xaf, 0x5c, 0xe9, 0x81, 0x9d, 0xe9, 0x70, 0xc6, 0xef, 0xeb, 0x9f, 0x10, 0x86, 0x7f, 0xa3, 0x3e, 0x20, 0xab, 0xd4, 0x9b, 0x91, 0x4b, 0x46, 0x30, 0x77, 0x1a, 0xaf, 0x36, 0xd1, 0xd4}}
	return a, nil
}

var _wrleventCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xdd\x6f\xdb\x36\x10\x7f\xf7\x5f\x71\xc9\xc3\x60\xa3\xae\xd3\x76\x59\xd1\x2a\xf1\xd6\x66\xd8\x86\x60\x45\x5b\x24\xed\xf6\x10\x04\x03\x2d\x9d\x1d\xa6\x32\x65\x90\xb4\x53\x23\xf0\xff\x3e\x90\xfa\x3a\x52\x94\xac\x7e\x6c\xc3\x86\xbd\x14\x31\xef\xa7\xe3\xdd\x8f\xf7\x45\x96\x2f\x57\x99\xd4\xf0\x8a\xa7\x7c\xbd\x84\xb9\xcc\x96\xf0\xe8\x23\x7b\x8e\xdf\x3d\x7f\xf2\xe4\xf8\xd9\xf3\xe3\x67\x4f\x1f\x3f\x7a\x3c\x18\xac\xd6\x33\x88\x33\xa1\x25\x8b\x35\xfc\x7e\xf1\xea\xa7\x0d\x0a\x0d\xf7\x03\x00\x00\x23\x93\xa8\xb2\xb5\x8c\x11\xb8\xd0\x28\xe7\x2c\x46\xf8\x8d\xa5\x3c\x61\xb3\x14\x0b\x58\x09\x9d\xaf\x05\x6c\xac\x4c\xe3\x70\x34\x68\xc8\x58\x92\xbc\x45\xc1\x52\xbd\x1d\xae\x98\xd4\x3c\xe6\x2b\x26\x74\x04\x2f\x93\x44\xa2\x52\x63\xd0\x7c\x89\x11\xbc\x3f\x17\xfa\xe9\xf1\xc8\x7e\xbe\x1b\x74\x19\x72\x81\x6a\x9d\xea\x4b\xd4\x1a\x65\xc0\x16\x85\x3a\x47\xa8\xa1\xd2\x4c\x24\x2a\x82\xfb\x62\xaf\x28\xdf\x64\xd7\x67\x97\x5f\x50\x5b\x52\xce\xc5\x3c\x0b\xec\xb2\x20\xe2\xe1\x28\x82\xea\x87\xaf\x5a\x69\xb9\x8e\x35\x34\x75\x19\x61\x8a\x1a\x04\x33\xee\x5f\x6a\xc9\xc5\xc2\x13\xcd\x98\xc2\x0b\xbc\x63\x32\x89\xe0\xfd\xcf\xfc\xe3\xd3\x63\x0f\x20\xad\x50\x45\x70\x95\x8b\x4f\xe0\xdb\x6b\x0f\x42\x38\x37\xb8\x82\x09\x0b\x24\xc8\x0d\x93\x30\xe7\x82\xab\x1b\x4c\x22\x38\xcb\xb2\xd4\x13\x16\x27\xcc\x33\xa1\x22\x38\x17\xda\x13\x1b\x06\x0d\xe5\xef\x57\x26\x0c\xc2\x2a\xe6\x5c\xb0\xf4\xb2\xe5\x48\x3c\xec\xca\x46\x0c\xc7\x10\xb2\x80\x72\xc1\xf5\xb0\x3a\x97\x3f\x42\x3c\x9a\xe5\x56\x0e\x8d\xb0\x83\x3f\x23\xee\xe0\xae\x06\x05\x69\x33\x82\x16\xca\xf2\x7d\x5b\xd9\x2a\x54\xee\x65\xca\xda\xd7\xc1\x52\x8e\x19\x91\xd0\x55\x98\xce\x27\x86\x25\x98\x5a\xb2\x5c\x01\xf5\x15\xa6\x8e\xeb\x2e\xb0\xe0\x0c\xa6\x25\x7b\xae\xb8\xe6\x1b\xa6\x84\x7c\x17\x54\x72\x06\xd3\x8a\x3e\x7f\x13\x4a\x90\xdd\x8b\x2e\xb8\x60\x42\x34\x4c\x29\xed\x8d\x4d\x4b\x56\xf3\x7d\xcb\x5f\x27\x1e\x13\x25\xab\x86\x86\xf2\xef\x12\xb3\x6b\x2d\x1d\x36\xc3\xa3\xba\x4c\x8e\x9d\x42\x35\x0e\x17\x94\xff\x8b\xc0\xd7\x2c\x02\xe0\xf0\x38\x26\xeb\xed\x04\x50\x54\x88\x49\x2a\x6f\x1e\xc5\xf8\xdf\x93\x67\x2c\x55\xb8\x27\xc9\x02\x18\x37\xb7\x1e\x75\x65\xd4\xfd\xae\x23\x91\x6a\xe1\x8e\x86\x9c\xd3\x4a\x13\xd3\x48\xf3\xb3\x23\x74\x9a\x63\xd1\x6b\x29\x6a\x5e\xdb\x14\x71\xf5\xb6\x66\x73\xc8\xe2\x38\x5b\x93\x41\x63\x94\xc7\xa3\xa3\x79\x9e\x49\x33\x9f\x18\x31\x70\x11\x38\x20\x0a\xb6\xf1\x36\x87\x42\x2f\x4c\xa7\xd5\xa7\x3e\x8a\x18\xad\xe5\x1a\x3d\xe9\x6e\x40\xff\x6e\xfa\x49\x4f\xa1\xe1\x63\x9f\xe9\xc6\xb1\x67\x25\xd1\xb3\xcf\x89\x8c\x08\x0e\x2f\xcc\xb8\xc3\x15\x88\x4c\x57\xe9\x7f\xe8\x7c\x71\x10\x08\x17\xf3\x61\xbe\x00\x77\x28\x11\x58\x2a\x31\xd9\xc2\x3a\x97\x1e\xb6\xf9\x18\x88\x1b\xe5\x15\xe1\xb6\xe8\x34\x54\xb6\x06\xd1\xa7\x4d\x99\x3d\x19\x2a\x8d\x9c\x98\x51\x99\x71\xa1\x7e\x45\x47\xfd\x28\x82\xc3\x77\x37\x58\xc5\xc1\x1d\xcb\x59\x94\xb8\xe0\x4a\xa3\xc4\xc4\x44\x95\xbe\x41\x40\x13\xe0\x87\x70\x74\x04\x14\xbf\x5c\x2b\x0d\x33\x04\xb6\xcc\xc4\xc2\xe2\x4a\x49\x36\xb7\x3f\xad\x0d\x05\x41\x81\x13\xa9\x12\x6c\x9f\x81\x64\xc9\x1e\x14\x4b\xb6\x20\x31\x46\xbe\xc1\x04\x58\x51\x68\xb7\xb9\xb1\x5c\x11\x6b\xdf\x88\x74\x0b\x99\xc0\x0a\xb2\x42\x99\x8b\xdb\x0e\xd8\x6b\x37\xef\xb8\xad\x83\x3e\xa3\x57\x04\x72\x7d\xd0\x15\x20\x0e\xd2\x2d\x98\x56\xf7\x03\x7b\xb2\xbe\x82\x9a\x19\x2e\x14\x4a\x3d\xfc\x80\xdb\x88\x7e\x9b\x07\xc4\xa8\x2d\x9c\xea\x0b\x4d\x9f\x50\xe9\xce\x0c\x13\x11\xbd\xd2\xc2\xad\xb5\x8d\xa5\x07\xf0\xb8\xcd\x5c\x14\xc9\x5e\x4b\xcb\xa0\x09\x64\x7e\x19\x12\xa1\xec\x0f\x66\x6f\xd9\x54\x48\x75\x6b\x56\xaa\x4c\xea\xb3\xad\x39\x23\x53\xd6\xcb\x96\x7b\xfd\xf7\xf0\x59\xcf\x45\x6f\x64\x82\x92\xee\x3f\x85\xab\x6b\x0a\x35\x93\x06\x77\x7a\x5b\xde\x17\x68\xce\x94\xbd\x81\xd6\x84\x0f\xb8\xf5\x2b\xbf\xd9\x35\x5e\x4b\x89\x42\xbf\xfd\x82\x14\xc8\x6d\xba\xf5\x6c\x02\xb8\xbb\xe1\x29\x0e\x6f\xe1\x94\xba\x36\x49\x51\x2c\xf4\xcd\x28\xd0\x84\x7a\xa6\x22\x51\x76\x75\x7b\x7d\x7d\xd0\xd4\x93\x2d\x86\x9e\x9e\xd1\xa0\x81\xe2\xf3\x36\xdf\x4f\x1b\x56\x84\x1a\x26\xc0\x4c\x22\xfb\xd0\x90\xec\x9a\x5b\x19\x6a\x6e\x49\x3e\x04\x81\x94\xa3\xa2\x08\x30\x1d\xc1\xed\x98\x5a\x33\xda\xd3\x8b\x89\x92\xfd\xf3\x8b\xff\x14\x10\x1a\x62\x6a\x64\x33\xec\xcd\x6c\x33\x6e\x2e\xd7\xc3\x5d\x40\x58\xcc\x86\x01\x09\x9d\x63\x02\xe2\x32\x8b\x03\x22\x52\x74\x82\x3b\xd2\xe4\x0c\x6b\x2e\x63\x2b\x64\x56\x59\x99\x6b\xd9\xa8\xed\x6e\x65\xd8\x8d\x25\x32\x8d\x97\xda\xfa\x69\xe8\x7d\x51\xfc\x4d\xd8\x2d\xb8\x3d\x7d\x58\xa0\xa1\x82\xb7\x6b\x3c\xcb\xb4\xd5\x76\x96\xe9\x2e\x4d\x16\xd6\x7a\xe7\xf3\x5f\xc7\x74\x26\x2f\xf2\xb6\x1a\x7a\x99\x2a\x3a\x6e\x05\x1d\xc6\x6c\x15\xc1\x8f\x6c\xc5\x66\x3c\xe5\x7a\x7b\xfa\x4d\xf9\x12\x37\xb1\xff\xde\x57\x3f\xc9\xa5\xb2\x5a\xa3\xf7\xc9\xdd\xf7\x7d\x6c\x2c\xa6\xec\xae\xd7\x2c\x32\x82\xb7\x2a\x2c\xc8\x8d\xf6\xfa\x4c\xae\x8c\x68\xd5\xd7\xae\x7e\x2d\xb7\x7f\xa8\x73\xd6\x5e\x05\xfd\x32\x48\xe3\xd9\xb7\xc1\x5c\xcf\x78\x5a\xcf\x9d\xbb\xe6\xdb\xe5\x5f\x7a\x62\x9e\xa9\xa1\x8e\x0d\x10\xb3\xd5\x64\x96\x49\x99\xdd\x0d\x47\x70\x60\x2d\x8e\xe0\xf0\x5c\x58\x9f\xea\x13\x30\xb8\xc2\xa6\xc3\x93\xae\xaa\xb8\x87\x90\x98\xad\x1c\x42\xda\x23\xa5\xb3\xd8\xb5\x79\xd3\xb9\x7b\xe5\xdd\xeb\x2c\x1f\x31\x81\x1b\xbd\xc4\xb3\x2e\xc7\x4c\xb3\xb3\x5f\x5d\xe0\xdc\x9b\x9e\xfc\x9d\x0e\x2a\x46\x0f\xfc\x96\x61\xb3\xbf\x54\x33\x71\x9d\xed\x0a\x14\x67\xa7\x46\x14\x7e\x21\x19\x9b\xd0\x29\xef\xe3\x62\x53\x27\xe7\x67\xf3\x41\x75\x4c\xea\x91\xb8\x33\x65\xbe\xe0\x22\xf6\x1f\x21\xaa\x8d\x81\xc6\xed\x23\xca\xef\x20\x94\x4e\xf8\xa4\xff\xfd\xd8\xdf\x6b\x28\xba\x7f\xf1\xa2\x5f\x75\xb5\x96\xb3\x4c\x47\x7d\x0c\x32\x8d\x40\x12\xd8\xe7\x58\xd1\xab\xd2\xd3\x4d\xf2\xf2\xde\xa3\xba\x7f\x15\x8e\xfe\xb9\x62\xee\xf9\xbc\xb7\x82\x93\x17\xa4\x62\x94\x23\x4f\x48\x10\x7c\x43\xea\x4c\x4c\x67\x7f\x9a\x8d\x9f\x90\x83\xd2\x89\xa1\x2a\x0d\xe9\x72\x47\xd1\x76\xbe\x9d\x04\x5e\xc8\x0a\x3f\x7b\x65\xda\xcb\x64\x69\x26\x63\x2d\xed\x49\x34\x13\x2b\x9f\x0b\xf3\x3a\xef\xd8\x61\xbb\xc6\xeb\x96\xf7\xe7\xbe\x2f\xd0\xfb\xdf\xa0\x43\xaf\xd0\xf5\x24\x1d\xc1\x0b\xfa\x5f\xb9\xb5\x52\x6f\xac\x0d\xd8\x0f\xd5\xf3\x79\xe5\xc9\xb8\x01\x70\xbd\x68\xbf\x62\x38\x9e\x04\xef\x28\xbe\x27\x81\x27\x6c\x20\x77\x03\xef\xc8\x1a\x25\xc0\x44\x11\x33\x47\xf7\xb2\x7c\x9e\xcd\x43\xa8\x78\xad\x3d\x19\x34\x91\x84\x0e\xe7\xd0\x4d\x83\xab\xd0\x54\xe7\x44\xb1\x0d\x0e\x4f\x1f\xda\xb5\x31\xe8\x2c\x82\x23\xa5\x33\xc9\x16\x78\x64\xd7\x8a\x00\xdb\x0d\x76\x83\x3f\x03\x00\x00\xff\xff\xcf\xe7\x21\x4d\x88\x1f\x00\x00"

func wrleventCdcBytes() ([]byte, error) {
	return bindataRead(
		_wrleventCdc,
		"WRLEvent.cdc",
	)
}

func wrleventCdc() (*asset, error) {
	bytes, err := wrleventCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "WRLEvent.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6d, 0xb6, 0xb3, 0xdb, 0xa, 0xb1, 0xef, 0x8e, 0xfe, 0x26, 0x87, 0xc5, 0x42, 0x45, 0xf4, 0x2e, 0xbb, 0x96, 0x5, 0x11, 0xaa, 0x24, 0x12, 0x7c, 0x32, 0xf8, 0x25, 0xbb, 0xd8, 0x56, 0xbf, 0x9b}}
	return a, nil
}

var _utilitycontractsPrivatereceiverforwarderCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\xcc\xa6\x40\x2b\x2d\xb2\x72\x0f\x45\x0f\x46\xbc\x69\x9a\x8f\xa2\x68\x91\x06\x49\xb6\xd7\x62\x44\x8d\x2d\x76\x65\x52\x20\x47\xd6\x06\x81\xff\xfb\x82\xd4\x27\xa5\x78\x81\xcd\x25\x92\xcd\x99\x79\xef\xcd\x9b\xa1\x57\xef\xa3\xe8\x07\xb8\xab\xd5\x4e\x66\x25\xc1\xb3\xfe\x4c\x0a\x1e\x8c\x3c\x20\x13\x3c\x92\x20\x79\x20\x03\xd7\x5a\xb1\x41\xc1\x51\xf4\x5c\x48\x0b\xa2\x7b\x05\xb9\xaf\x4a\xda\x93\x62\x0b\x08\xb6\x22\x21\xb1\x04\x43\x56\xd7\x46\x10\xa0\xca\xc1\xf4\x29\xa4\x62\x32\x5b\x14\x04\x51\x53\x68\x4b\x90\x53\xa5\xad\x64\xd8\xd6\x4a\xb0\xd4\x0a\xa4\x05\xad\xca\x17\x10\x58\x96\xe8\xc0\x64\x2f\x80\x0a\x30\xdf\x4b\x05\x5c\x18\x5d\xef\x0a\x40\xa8\xea\xac\x94\x02\x04\x56\x98\xc9\x52\xf2\x4b\x1a\x45\xef\x57\x51\x24\xf7\x95\x36\x3c\x50\x69\x99\x6c\x8d\xde\xc3\xcf\x5f\xee\x3e\xdd\xff\xf1\xe7\xef\x7f\xdf\x3e\xff\xf3\xd7\xed\xfd\xd5\xcd\xcd\xe3\xed\xd3\x53\x14\x55\x75\x36\x52\xe9\x38\xf7\x94\xef\xb4\x69\xd0\xe4\x64\xe0\x35\x8a\x00\x00\x56\x2b\xb8\x3d\x90\x62\xe0\x02\xd9\x61\xa5\xbd\x64\xa6\x1c\x9a\x82\x14\xb0\xab\x66\x01\xcd\xc0\x8b\x72\x60\x0d\x5c\x10\x30\x9a\x1d\xf1\xa0\x84\xcf\xe6\x4a\x93\x4f\xd7\xd5\xbd\x69\xa3\x62\xdc\xeb\x5a\xf1\x1a\x3e\xdd\xc9\x2f\xbf\xfe\x72\x0e\xac\xd7\x70\x95\xe7\x86\xac\xbd\x4c\xa2\x21\xb6\x24\x86\x27\x52\x39\x99\x27\xd6\x06\x77\xf4\x80\x5c\xac\x61\xf2\x12\x9e\x9d\xb1\x3b\x19\xf4\x8d\x98\x07\xaf\x7b\x1b\x32\x3e\x8f\x65\x86\xb6\x2f\xa4\xeb\xe4\xf3\xd6\x91\xd6\x09\x66\xc8\x2b\x33\x95\xca\xeb\xd7\xc8\xb2\x84\x8c\xc0\x92\xe2\x34\x8c\x25\xe0\x97\x8a\x40\xaa\x5c\x0a\x64\xb2\x5d\x1f\x7c\x2b\x10\x0c\x6d\xc9\x90\x12\xe4\x44\xc7\x50\xeb\x36\xc5\xf0\x88\x42\x90\xb5\xb1\xa5\x72\x9b\xc0\x01\x8d\x3b\x2c\x2b\x49\x4e\xf5\xeb\xc1\x54\x17\x3f\xbe\x06\x4e\x4a\x7b\x19\x8e\x1f\x03\x52\x1d\x85\xb7\x0a\xad\x56\xce\x8c\xad\xb7\x3d\x58\xc6\xcf\xe4\xc0\xfe\x8b\x75\xc9\xa0\xb3\xff\x49\x30\xa0\xf5\x26\x37\xbb\xda\xcd\x91\x9f\x99\x6d\x2b\xa0\x9d\x66\x92\xdc\xdb\x69\x80\xfb\x93\xed\x32\xd5\x56\xaa\x9d\xff\xce\xb2\x36\x94\x8f\x6a\x7c\x83\x7f\x6f\xfc\xc4\x0d\x60\x4f\x23\x76\xf3\xb2\x86\xdf\x42\xea\xbe\x4a\x02\xaf\x43\x0a\xf7\x57\x4e\x2c\xfd\x48\x5b\xd8\x80\x53\x34\x1d\xd0\xa5\x99\x36\x46\x37\x71\xf2\x2e\x5a\xc4\x65\x58\xa2\xeb\xd5\xc6\xcf\x67\xda\xbd\x86\xe7\x26\xb9\xd3\x10\xdd\xc5\x07\xf7\x3f\x09\x8f\xbb\x69\x3c\x35\x4b\x5d\xfe\x76\x98\x3c\x4a\xdd\x28\x32\x97\x29\xb6\x83\x95\x0c\x99\x8e\x63\x52\xa9\x24\xc7\xdf\x6b\x8d\xb9\x48\x95\xa1\xd9\x27\x1d\xb5\x99\x46\xf0\x6e\x03\x4a\x96\x6b\x38\xbb\xd6\x75\x99\x83\xd2\x0c\xed\x77\xe3\x0e\x1e\x2d\xee\x97\x9a\x6b\xf7\x88\xe9\x2c\x28\x72\x0c\xde\xc2\xbe\xc0\x66\xac\x1f\x85\x01\xc7\x61\xd3\x09\x43\xc8\x74\x4f\xcd\x38\xcb\xed\x47\xce\xbe\x8a\x9a\xc9\x8c\x8f\xb0\x1a\xc9\x85\x87\x55\x19\x7d\x90\xb9\xf7\xe1\xb4\x50\xe7\x41\xb7\x2b\x9c\xe5\x96\x35\xbe\x5f\x6e\x67\xd5\xc9\xb6\x19\x05\xe6\xda\x28\xb8\xf8\xd0\xd6\x80\x37\x2b\x0c\x8f\x49\x4f\x7e\xb9\xca\xda\x15\x3b\xc9\xdc\x83\xb7\xa4\xf2\xce\x6d\x1e\x94\x8d\xff\x83\xce\x4d\xc3\xbe\x3e\xef\xb6\xda\xe9\x79\x5a\x0c\x06\x0a\xe1\x2c\x0b\x1b\xd8\x11\x5f\xb5\x2f\xf1\xe0\xd2\xc5\xf1\x2a\xdc\xd0\xb0\xe9\x13\xa4\x3b\xe2\xa9\x82\xa7\x2e\xb7\x74\x78\xfa\x18\x9f\x3c\x73\xf2\x1e\x48\x16\xce\x1e\x0d\x7d\x79\x09\x15\x2a\x29\xe2\xa5\xa3\x83\x5d\xdd\x51\xe8\x77\x1e\x99\xb3\x19\xcf\x19\xc7\xc5\x2e\x68\x35\x0e\xa1\xbc\xed\x6b\x3f\xd1\xd6\x77\x74\x71\xf1\x9d\xfb\xd5\xf9\xd6\x95\x78\xde\xfd\xe0\x98\x5f\x7c\x41\xff\xfc\x88\x2d\xee\x63\xbf\x13\xfb\x72\xb3\xc3\xa7\x2f\x64\x17\x35\xbb\x91\x4f\x45\x8d\x68\x60\x33\x81\x39\x2b\xd5\x7b\xc2\xe2\x81\xe2\x61\x26\x5a\xb4\x71\x32\xd9\x8a\x0b\x02\x5d\x2b\x8e\xd1\xf1\x6b\x00\x00\x00\xff\xff\xd3\xf5\x5a\x30\x27\x0a\x00\x00"

func utilitycontractsPrivatereceiverforwarderCdcBytes() ([]byte, error) {
	return bindataRead(
		_utilitycontractsPrivatereceiverforwarderCdc,
		"utilityContracts/PrivateReceiverForwarder.cdc",
	)
}

func utilitycontractsPrivatereceiverforwarderCdc() (*asset, error) {
	bytes, err := utilitycontractsPrivatereceiverforwarderCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "utilityContracts/PrivateReceiverForwarder.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5a, 0xf6, 0x87, 0xb8, 0xb7, 0x62, 0xda, 0x3a, 0xb2, 0xce, 0xcb, 0x5a, 0xf4, 0x51, 0x72, 0x10, 0x1, 0x88, 0x20, 0x44, 0x82, 0xe7, 0x1, 0xd7, 0x39, 0xf4, 0xbe, 0x89, 0xff, 0x9a, 0xcf, 0x31}}
	return a, nil
}

var _utilitycontractsTokenforwardingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\x4d\x6f\xe3\x36\x14\xbc\xf3\x57\xcc\x6e\x81\xae\x1d\x64\xe5\x1e\x8a\x1e\x82\xa4\xdb\x6d\x3e\x8a\xa2\x45\x0a\x78\xb3\xed\xb1\xa0\xa9\x27\x8b\x1b\x99\x14\xc8\x27\x6b\x83\xc0\xff\xbd\x20\x25\xd1\x52\xa2\x14\xe9\xa5\xb9\xc4\x14\xf8\xe6\xcd\xbc\x19\x92\xab\x93\x13\x21\xbe\xc1\x4d\x63\xb6\x7a\x53\x11\xee\xec\x3d\x19\xdc\x58\xd7\x4a\x97\x6b\xb3\xc5\xa5\x35\xec\xa4\x62\x21\xee\x4a\xed\xa1\xfa\x25\x7c\x69\x5b\x8f\xd2\xb6\x90\x06\x52\x29\xdb\x18\x86\xb2\x4d\x95\xc3\x13\xa3\xa9\x21\xa1\x1a\xcf\x76\x97\xc0\x3b\xec\x35\x29\xd2\x7b\x72\x82\x2d\x64\x55\xd9\x16\x5c\xd2\x0e\x6c\x51\x74\x5d\xc1\x61\x9f\x0f\x5f\x24\x72\x5d\x14\xe4\xc8\x70\xea\xd1\x96\x64\x68\x4f\x2e\x94\x3d\xc0\x75\x68\x7d\x4d\x16\x58\xd2\x03\x94\x34\xa8\x9b\x4d\xa5\x7d\x09\x0e\xb4\x7b\x41\xe4\xe0\xc8\xdb\xc6\x29\x82\xf4\x90\x89\x0c\x94\xac\xe5\x46\x57\x9a\x1f\xf0\xa5\xf1\x8c\x4a\xdf\x13\x24\xfe\x94\x4d\xc5\xa7\x42\x9a\x3c\xb4\x83\x27\x13\x30\x72\x4b\xde\xbc\x63\xd0\x9e\x0c\x0c\x51\xa0\x8c\x7b\x63\x5b\x68\x86\xf6\x47\xd2\x99\x10\x7f\x95\x64\xc6\x23\x6a\xa5\xe1\xa8\x4d\x39\x92\x1c\x7a\x24\x6e\xa7\x9d\x24\x25\xab\x2a\x76\xeb\x76\xdc\x52\x9b\x76\x88\xa2\x31\x8a\xb5\x0d\x88\x39\x6a\x67\xf7\x3a\xa7\xd0\xb4\xd5\x5c\xc6\x9a\x24\xc8\x51\xa4\xa0\x08\x5c\x4a\xee\x90\x43\xef\xd1\xa0\x05\x97\xa4\xdd\x71\xdc\x99\x10\x27\x2b\x21\xf4\xae\xb6\x8e\x9f\xb8\x56\x38\xbb\xc3\x77\x5f\x6f\x3e\xdf\xfe\xf2\xeb\xcf\xbf\x5f\xdf\xfd\xf1\xdb\xf5\xed\xc7\xab\xab\xf5\xf5\xa7\x4f\x42\xd4\xcd\xe6\x18\x8c\xb8\x7f\x14\xa0\x47\x21\x00\x60\xb5\xc2\xf5\x3e\xf8\x18\xe9\x68\x0f\xda\x69\x66\xca\xa3\x9f\x03\x07\xe9\x08\x39\xd5\xd6\x6b\xee\x86\x1a\x24\xb1\x74\x5b\xe2\xc1\x69\x17\xd1\x42\x47\x8a\x70\xc3\x6c\xf2\xab\xae\x6e\x21\x77\x61\xce\x67\xf8\x7c\xa3\xbf\xfe\xf0\xfd\x69\x64\x7e\x86\x8f\x79\xee\xc8\xfb\x0f\x4b\x91\xea\x53\x12\xd2\x78\xcf\xa6\xa2\xb3\x34\xcc\x5e\x43\xaf\x23\x1e\x04\xed\x03\x73\x47\x91\xe2\x98\x73\x14\xd2\xea\xaa\xc2\x26\x06\x86\xb3\x69\x2d\x81\x1f\x6a\x82\x36\xb9\x56\x92\xc9\xf7\x03\x89\x33\x91\x63\xdb\x6c\x5c\x8e\x44\x77\x10\xe9\xa7\x54\x8a\xbc\x5f\x78\xaa\x8a\x25\xf6\x32\x58\xae\x74\xad\x29\x88\xbf\x4c\x71\x9e\x30\xef\x79\xce\xa1\xad\x56\x41\x7c\x17\xae\x2e\x31\xf2\x9e\xfc\x70\x04\x60\x37\x5f\x48\x71\x3c\x34\x06\xd2\x6d\x9b\x5d\x3c\x93\x26\x1f\xc2\xe4\xc7\x48\x9a\x07\xf3\x12\xa7\x77\xbe\x47\x6a\x7c\x48\x45\x3c\x4d\x6c\x1d\xe5\x47\xc9\x73\xb4\x82\x51\x45\x63\x06\xe6\x8b\xce\xcd\x9f\xa6\x3e\x45\xe0\x25\x1e\x53\x55\xf8\xab\x46\x99\x59\x53\x81\x0b\x84\x49\x65\x89\x50\xb6\xb1\xce\xd9\xf6\xfc\xdb\xc7\x79\xd3\x0f\x3f\x2e\x96\x6f\xc4\x33\xc8\x8d\xac\x64\xb0\xe7\x22\x06\x2b\xeb\x97\xd3\x7d\xa3\xb6\xd9\x94\xf8\xf9\xfb\xf0\x7f\x39\xdd\x1e\x4e\xc2\xcb\x39\xee\x3b\x0c\x41\x8e\x22\x6c\x6b\xc8\x7d\xc8\x64\x17\xea\x65\x42\x3b\x4c\xdc\x56\xa5\x34\x5b\x5a\x0f\x82\xfb\xb5\x9f\xfa\x02\x5b\xc4\x0f\x45\xba\x21\x7b\xe7\xfa\xdb\x25\x3f\x6e\xfd\x37\x7f\x9e\xf4\x5a\xfc\x0d\x43\xed\x7a\x2e\x90\x4f\x7d\xaa\x1d\x3d\xf9\x12\xfe\xc6\xd5\xaf\x71\x0a\x6f\x2e\x60\x74\x75\x86\xb7\x97\xf1\x0d\x32\x96\xd1\x95\xcd\x5d\x89\xf1\x36\x0b\x22\x8f\xb4\xde\x4e\x28\x1c\x26\xab\x69\x70\x70\x31\x61\x37\x37\x7c\x6d\x34\x2f\x66\x8f\xe3\xeb\xd4\xff\xa7\x90\xfe\xbf\xd2\x9f\xa7\xa1\x2b\x38\xa4\x6b\xfe\xf9\xb3\xd5\x7f\x0a\xb7\x89\xa1\x76\xf2\x18\x0f\xb4\xd2\x03\xf6\x42\xec\xfa\xc8\xa5\xb8\x3d\xeb\xf1\xc2\xb8\xc3\x5d\x91\xda\x1d\x07\xed\x88\x1b\x67\x70\xfe\xbe\x7f\x85\x67\x61\xd2\xcf\x65\xaf\xf0\x20\xfe\x09\x00\x00\xff\xff\x4f\xb2\xa7\xb0\x2f\x09\x00\x00"

func utilitycontractsTokenforwardingCdcBytes() ([]byte, error) {
	return bindataRead(
		_utilitycontractsTokenforwardingCdc,
		"utilityContracts/TokenForwarding.cdc",
	)
}

func utilitycontractsTokenforwardingCdc() (*asset, error) {
	bytes, err := utilitycontractsTokenforwardingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "utilityContracts/TokenForwarding.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7d, 0x3e, 0x44, 0xd9, 0xc0, 0x14, 0x91, 0xad, 0x34, 0x96, 0xca, 0x7d, 0xf8, 0x15, 0x91, 0x80, 0xe7, 0x6e, 0xed, 0x34, 0xf5, 0x3e, 0x81, 0x45, 0x65, 0x1e, 0x1f, 0x23, 0x36, 0x2d, 0x65, 0x62}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"FungibleToken.cdc": fungibletokenCdc,
	"Lilium.cdc":        liliumCdc,
	"WRLEvent.cdc":      wrleventCdc,
	"utilityContracts/PrivateReceiverForwarder.cdc": utilitycontractsPrivatereceiverforwarderCdc,
	"utilityContracts/TokenForwarding.cdc":          utilitycontractsTokenforwardingCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"FungibleToken.cdc": {fungibletokenCdc, map[string]*bintree{}},
	"Lilium.cdc": {liliumCdc, map[string]*bintree{}},
	"WRLEvent.cdc": {wrleventCdc, map[string]*bintree{}},
	"utilityContracts": {nil, map[string]*bintree{
		"PrivateReceiverForwarder.cdc": {utilitycontractsPrivatereceiverforwarderCdc, map[string]*bintree{}},
		"TokenForwarding.cdc": {utilitycontractsTokenforwardingCdc, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
